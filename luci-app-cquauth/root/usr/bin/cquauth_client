#!/usr/bin/lua

local uci = require "uci"
local ctx = uci.cursor()
local ubus = require "ubus"

local ENABLED = tonumber(ctx:get("cquauth", "basic", "enabled")) == 1 or 0
local PING_TARGET = ctx:get("cquauth", "basic", "ping_target") or "223.5.5.5"
local CHECK_INTERVAL = tonumber(ctx:get("cquauth", "basic", "check_interval")) or 60
local MAX_ATTEMPTS = tonumber(ctx:get("cquauth", "basic", "max_attempts")) or 0
local LOGIN_SERVER = "10.254.7.4"
local ENABLE_ECMP = tonumber(ctx:get("cquauth", "basic", "enable_ecmp")) == 1 or 0

local function log(msg)
    os.execute(string.format("logger -t cquauth_client '%s'", msg:gsub("'", "'\\''")))
end

local function log_ifname(ifname, msg)
    log(string.format("[%s] %s", ifname, msg))
end

local function check_authserver(ifname)
    if not ifname then
        log("无效网络接口: " .. (ifname or "nil"))
        return false
    end
    local cmd = string.format("ping -c 4 -W 2 -I %s %s >/dev/null 2>&1", ifname, LOGIN_SERVER)
    return os.execute(cmd) == 0
end

local function check_network(ifname)
    if not ifname then
        log("无效网络接口: " .. (ifname or "nil"))
        return false
    end
    local cmd = string.format("ping -c 4 -W 2 -I %s %s >/dev/null 2>&1", ifname, PING_TARGET)
    return os.execute(cmd) == 0
end

local function auth_account(config)
    local count = 0
    local conn = ubus.connect()
    if not conn then
        log("无法连接到 ubusd")
        return false
    end

    while count < MAX_ATTEMPTS or MAX_ATTEMPTS == 0 do
        local result = conn:call("cquauth", "login", {
            user = config.user,
            pass = config.pass,
            interface = config.interface,
            ua = config.ua,
            terminal_type = config.terminal_type
        })

        if result and result.success then
            log_ifname(config.interface, string.format("认证成功: %s", config.user))
            local status = conn:call("cquauth", "get_status", { interface = config.interface })
            if status then
                log_ifname(config.interface, string.format("UID: %s, Time: %s, Flow: %s, IP: %s",
                    status.uid or "N/A", status.time or "N/A", status.flow or "N/A", status.v4ip or "N/A"))
            end
            conn:close()
            return true
        else
            count = count + 1
            log_ifname(config.interface, string.format("认证失败: %s - %s (尝试 %d/%d)", config.user, result and result.message or "未知错误", count, MAX_ATTEMPTS))
            log_ifname(config.interface, result.result or "N/A")
            os.execute("sleep 5")
        end
    end
    conn:close()
    return false
end

while true do
    local success, err = pcall(function()
        if ENABLED == 0 then
            return
        end
        -- TODO: Add weights options, maybe
        local ecmp_ifaces = {}
        ctx:foreach("cquauth", "account", function(s)
            if s.enabled == "1" then
                local config = {
                    user = s.user or "",
                    pass = s.pass or "",
                    ua = s.ua or "",
                    interface = s.interface or "",
                    terminal_type = s.terminal_type or "pc"
                }
                if not check_network(config.interface) then
                    log_ifname(config.interface, "网络断开: 开始认证")
                    if not check_authserver(config.interface) then
                        log_ifname(config.interface, "无法连接到认证服务器, 尝试重新连接端口: " .. config.interface)
                        os.execute("ifup " .. config.interface)
                    end
                    if not auth_account(config) then
                        log_ifname(config.interface, "认证失败: " .. config.user)
                        ctx:set("cquauth", s['.name'], "enabled", "0")
                        ctx:commit("cquauth")
                    end
                elseif ENABLE_ECMP == 1 then
                    table.insert(ecmp_ifaces, config.interface)
                end
            end
        end)
        if ENABLE_ECMP == 1 and #ecmp_ifaces > 0 then
            local conn = ubus.connect()
            if not conn then
                log("无法连接到 ubusd")
                return
            end
            local result = conn:call("cquauth", "enable_ecmp", { interfaces = ecmp_ifaces })
            if result and result.success then
                log("ECMP 已启用")
            else
                log("ECMP 启用失败: " .. (result and result.message or "未知错误"))
            end
            conn:close()
        end
    end)
    log("Sleeping..")
    if not success then
        log("程序错误: " .. err)
    end
    os.execute("sleep " .. CHECK_INTERVAL)
end